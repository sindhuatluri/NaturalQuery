/**
 * Remembers and retrieves a value by a given name, or the value generated by `getValue` if the name doesn't exist.
 * The return type is inferred from the return type of `getValue`.
 *
 * @template T - The type of value being remembered
 * @param {string} name - The name under which to remember the value
 * @param {() => T} getValue - The function that generates the value to remember
 * @returns {T} - The remembered value
 */
export function remember<T>(name: string, getValue: () => T): T {
  const thusly = globalThis as typeof globalThis & {
    __remember_epic_web?: Map<string, any>;
  };

  thusly.__remember_epic_web ??= new Map<string, T>();

  if (!thusly.__remember_epic_web.has(name)) {
    thusly.__remember_epic_web.set(name, getValue());
  }

  return thusly.__remember_epic_web.get(name) as T;
}

/**
 * Forgets a remembered value by a given name. Does not throw if the name doesn't exist.
 *
 * @param {string} name - The name under which the value was remembered
 * @returns {boolean} - A remembered value existed and has been forgotten
 */
export function forget(name: string): boolean {
  const thusly = globalThis as typeof globalThis & {
    __remember_epic_web?: Map<string, any>;
  };

  thusly.__remember_epic_web ??= new Map<string, any>();
  return thusly.__remember_epic_web.delete(name);
}
